// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(BirdClubContext))]
    partial class BirdClubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Models.Bird", b =>
                {
                    b.Property<int>("BirdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("birdId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BirdId"), 1L, 1);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("date")
                        .HasColumnName("addDate");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<string>("BirdName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("birdName");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Elo")
                        .HasColumnType("int")
                        .HasColumnName("ELO");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberId");

                    b.Property<string>("Origin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("origin");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profilePic");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("BirdId");

                    b.HasIndex("MemberId");

                    b.ToTable("Bird", (string)null);
                });

            modelBuilder.Entity("DAL.Models.BirdMedia", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"), 1L, 1);

                    b.Property<int?>("BirdId")
                        .HasColumnType("int")
                        .HasColumnName("birdId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.HasKey("PictureId")
                        .HasName("PK__BirdMedi__8C2866D8E5255F8B");

                    b.HasIndex("BirdId");

                    b.ToTable("BirdMedia", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("uploadDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("Vote")
                        .HasColumnType("int")
                        .HasColumnName("vote");

                    b.HasKey("BlogId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ClubInformation", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"), 1L, 1);

                    b.Property<int?>("ClubLocationId")
                        .HasColumnType("int")
                        .HasColumnName("clubLocationId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubId")
                        .HasName("PK__ClubInfo__DF4AEAB2467C2F83");

                    b.ToTable("ClubInformation", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ClubLocation", b =>
                {
                    b.Property<int>("ClubLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clubLocationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubLocationId"), 1L, 1);

                    b.Property<string>("ClubName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("clubName");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.HasKey("ClubLocationId");

                    b.ToTable("ClubLocation", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<int?>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blogId");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int?>("Vote")
                        .HasColumnType("int")
                        .HasColumnName("vote");

                    b.HasKey("CommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"), 1L, 1);

                    b.Property<int?>("AfterScore")
                        .HasColumnType("int")
                        .HasColumnName("afterScore");

                    b.Property<int?>("BeforeScore")
                        .HasColumnType("int")
                        .HasColumnName("beforeScore");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<string>("ContestName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contestName");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fee");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("host");

                    b.Property<string>("Incharge")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("incharge");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnType("int")
                        .HasColumnName("numberOfParticipants");

                    b.Property<decimal?>("Prize")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("prize");

                    b.Property<DateTime?>("RegistrationDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDeadline");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("ContestId");

                    b.ToTable("Contest", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ContestMedia", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"), 1L, 1);

                    b.Property<int?>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("contestId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.HasKey("PictureId")
                        .HasName("PK__ContestM__769A271A9B2DCFE0");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestMedia", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ContestParticipant", b =>
                {
                    b.Property<int?>("BirdId")
                        .HasColumnType("int")
                        .HasColumnName("birdId");

                    b.Property<string>("CheckInStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("checkInStatus");

                    b.Property<int?>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("contestId");

                    b.Property<int>("Elo")
                        .HasColumnType("int")
                        .HasColumnName("ELO");

                    b.Property<string>("ParticipantNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("participantNo");

                    b.HasIndex("BirdId");

                    b.HasIndex("ContestId");

                    b.ToTable("ContestParticipants", (string)null);
                });

            modelBuilder.Entity("DAL.Models.ContestScore", b =>
                {
                    b.Property<int>("ScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("scoreId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreId"), 1L, 1);

                    b.Property<int?>("BirdId")
                        .HasColumnType("int")
                        .HasColumnName("birdId");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int?>("ContestId")
                        .HasColumnType("int")
                        .HasColumnName("contestId");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberId");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("score");

                    b.Property<DateTime?>("ScoreDate")
                        .HasColumnType("date")
                        .HasColumnName("scoreDate");

                    b.HasKey("ScoreId")
                        .HasName("PK__ContestS__B56A0C8D230083CD");

                    b.ToTable("ContestScore", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("detail");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldTrip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fee");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("host");

                    b.Property<string>("InCharge")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inCharge");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnType("int")
                        .HasColumnName("numberOfParticipants");

                    b.Property<DateTime?>("RegistrationDeadline")
                        .HasColumnType("date")
                        .HasColumnName("registrationDeadline");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tripName");

                    b.HasKey("TripId")
                        .HasName("PK__FieldTri__C1BEA5A2CBA40722");

                    b.ToTable("FieldTrip", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldtripDaybyDay", b =>
                {
                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("day");

                    b.Property<int>("DaybyDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("daybyDayID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DaybyDayId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("PictureId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pictureId");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasIndex("TripId");

                    b.ToTable("FieldtripDaybyDay", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldtripGettingThere", b =>
                {
                    b.Property<int>("GettingThereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gettingThereId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GettingThereId"), 1L, 1);

                    b.Property<string>("GettingThereText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gettingThereText");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasIndex("TripId");

                    b.ToTable("FieldtripGettingThere", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldtripInclusion", b =>
                {
                    b.Property<int>("InclusionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inclusionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InclusionId"), 1L, 1);

                    b.Property<string>("InclusionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("inclusionText");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasIndex("TripId");

                    b.ToTable("FieldtripInclusions", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldtripMedia", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasKey("PictureId")
                        .HasName("PK__Fieldtri__769A271A14AF4791");

                    b.HasIndex("TripId");

                    b.ToTable("FieldtripMedia", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldTripOverview", b =>
                {
                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("destination");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("date")
                        .HasColumnName("registrationDeadline");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.Property<string>("UserReview")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userReview");

                    b.HasIndex("TripId");

                    b.ToTable("FieldTripOverview", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldTripParticipant", b =>
                {
                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberId");

                    b.Property<string>("ParticipantNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("participantNo");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TripId");

                    b.ToTable("FieldTripParticipants", (string)null);
                });

            modelBuilder.Entity("DAL.Models.FieldtripRate", b =>
                {
                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("RateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rateId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateId"), 1L, 1);

                    b.Property<string>("RateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rateType");

                    b.Property<int>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("tripId");

                    b.HasIndex("TripId");

                    b.ToTable("FieldtripRates", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Gallery", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.ToTable("Gallery", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("locationName");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("meetingId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("endDate");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("host");

                    b.Property<string>("Incharge")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("incharge");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("locationId");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("meetingName");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnType("int")
                        .HasColumnName("numberOfParticipants");

                    b.Property<DateTime?>("RegistrationDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("registrationDeadline");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("startDate");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("MeetingId");

                    b.ToTable("Meeting", (string)null);
                });

            modelBuilder.Entity("DAL.Models.MeetingMedia", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pictureId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int")
                        .HasColumnName("meetingId");

                    b.HasKey("PictureId")
                        .HasName("PK__MeetingM__769A271A1B6856EF");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingMedia", (string)null);
                });

            modelBuilder.Entity("DAL.Models.MeetingParticipant", b =>
                {
                    b.Property<int>("MeetingId")
                        .HasColumnType("int")
                        .HasColumnName("meetingId");

                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberId");

                    b.Property<string>("ParticipantNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("participantNo");

                    b.HasKey("MeetingId", "MemberId")
                        .HasName("PK__MeetingP__2BA312F592ED3821");

                    b.HasIndex("MemberId");

                    b.ToTable("MeetingParticipant", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Member", b =>
                {
                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberId");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("MemberId");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("DAL.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Filepdf")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("filepdf");

                    b.Property<string>("NewsContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("newsContent");

                    b.Property<string>("Picture")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("picture");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("uploadDate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("NewsId");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transactionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<string>("DocNo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("docNo");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("paymentDate");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transactionDate");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("transactionType");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("value");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int?>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<string>("MemberId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("memberId");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("userName");

                    b.HasKey("UserId");

                    b.HasIndex("MemberId")
                        .IsUnique()
                        .HasFilter("[memberId] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DAL.Models.Bird", b =>
                {
                    b.HasOne("DAL.Models.Member", "Member")
                        .WithMany("Birds")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Bird_Member");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DAL.Models.BirdMedia", b =>
                {
                    b.HasOne("DAL.Models.Bird", "Bird")
                        .WithMany("BirdMedia")
                        .HasForeignKey("BirdId")
                        .HasConstraintName("FK_BirdMedia_Bird");

                    b.Navigation("Bird");
                });

            modelBuilder.Entity("DAL.Models.ContestMedia", b =>
                {
                    b.HasOne("DAL.Models.Contest", "Contest")
                        .WithMany("ContestMedia")
                        .HasForeignKey("ContestId")
                        .HasConstraintName("FK_Contest");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("DAL.Models.ContestParticipant", b =>
                {
                    b.HasOne("DAL.Models.Bird", "Bird")
                        .WithMany()
                        .HasForeignKey("BirdId")
                        .HasConstraintName("FK__TournamentP__BID__0E6E26BF");

                    b.HasOne("DAL.Models.Contest", "Contest")
                        .WithMany()
                        .HasForeignKey("ContestId")
                        .HasConstraintName("FK__TournamentP__TID__0D7A0286");

                    b.Navigation("Bird");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("DAL.Models.Feedback", b =>
                {
                    b.HasOne("DAL.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Models.FieldtripDaybyDay", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldtripDaybyDay_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldtripGettingThere", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldtripGettingThere_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldtripInclusion", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldtripInclusions_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldtripMedia", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany("FieldtripMedia")
                        .HasForeignKey("TripId")
                        .HasConstraintName("FK_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldTripOverview", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldTripOverview_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldTripParticipant", b =>
                {
                    b.HasOne("DAL.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldTripParticipants_Member");

                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK__FieldTripPa__FID__1332DBDC");

                    b.Navigation("Member");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.FieldtripRate", b =>
                {
                    b.HasOne("DAL.Models.FieldTrip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .IsRequired()
                        .HasConstraintName("FK_FieldtripRates_FieldTrip");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("DAL.Models.MeetingMedia", b =>
                {
                    b.HasOne("DAL.Models.Meeting", "Meeting")
                        .WithMany("MeetingMedia")
                        .HasForeignKey("MeetingId")
                        .HasConstraintName("FK_Meeting");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("DAL.Models.MeetingParticipant", b =>
                {
                    b.HasOne("DAL.Models.Meeting", "Meeting")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK__MeetingPar__MeID__03F0984C");

                    b.HasOne("DAL.Models.Member", "Member")
                        .WithMany("MeetingParticipants")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_MeetingParticipant_Member");

                    b.Navigation("Meeting");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.HasOne("DAL.Models.Member", "Member")
                        .WithOne("MemberUser")
                        .HasForeignKey("DAL.Models.User", "MemberId")
                        .HasConstraintName("FK_Users_Member");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("DAL.Models.Bird", b =>
                {
                    b.Navigation("BirdMedia");
                });

            modelBuilder.Entity("DAL.Models.Contest", b =>
                {
                    b.Navigation("ContestMedia");
                });

            modelBuilder.Entity("DAL.Models.FieldTrip", b =>
                {
                    b.Navigation("FieldtripMedia");
                });

            modelBuilder.Entity("DAL.Models.Meeting", b =>
                {
                    b.Navigation("MeetingMedia");

                    b.Navigation("MeetingParticipants");
                });

            modelBuilder.Entity("DAL.Models.Member", b =>
                {
                    b.Navigation("Birds");

                    b.Navigation("MeetingParticipants");

                    b.Navigation("MemberUser");
                });

            modelBuilder.Entity("DAL.Models.User", b =>
                {
                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
